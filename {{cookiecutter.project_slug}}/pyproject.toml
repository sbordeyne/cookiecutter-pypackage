{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD3': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPLv3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}

[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.author}}"]
license = "{{cookiecutter.license}}"
classifiers = [
{%- if cookiecutter.license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.license] }}',
{%- endif %}
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]

[tool.poetry.dependencies]
python = "^3.10"

[tool.poe.tasks]
add_changelog  = { script = "scripts.add_changelog:main" }
docker_build = { script = "scripts.docker:build" }
docker_push = { script = "scripts.docker:push" }

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
pylama = "^8.3.7"
yapf = "^0.32.0"
isort = "^5.10.1"
requests = "^2.27.1"
poethepoet = "^0.12.2"
toml = "^0.10.2"
tbump = "^6.7.0"
sphinx = '*'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
based_on_style = 'pep8'
spaces_before_comment = 2
split_before_logical_operator = true
split_before_arithmetic_operator = true
split_before_bitwise_operator = true
split_complex_comprehension = true
split_before_first_argument = true
split_before_dot = true
split_before_dict_set_operator = true
split_before_closing_bracket = true
each_dict_entry_on_separate_line = true
dedent_closing_brackets = true
column_limit = 119
coalesce_brackets = true

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}/"

[tool.tbump.version]
current = "1.0.0"
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "[version] Bump to {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.file]]
src = "{{cookiecutter.project_slug}}/__init__.py"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "add-changelog"
cmd = "poetry run poe add_changelog {new_version}"

[[tool.tbump.after_push]]
name = "publish"
cmd = "poetry publish --build"

[tool.changelog.tag_mapping]
fix = "Bugfixes"
feat = "New features"
san = "Refactorings"

{%- if cookiecutter.use_docker %}
[tool.docker.build]
architectures = ["amd64"]
use_latest = true
registry = "{{cookiecutter.docker_registry}}"
{%- endif %}
